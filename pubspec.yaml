name: delivery_service
description: This project using for shopping food and delivery service. We use  Flutter bloc architecture

# The following line prevents the package from being accidentally published to
# pub.dev using `flutter pub publish`. This is preferred for private packages.
publish_to: 'none' # Remove this line if you wish to publish to pub.dev

# The following defines the version and build number for your application.
# A version number is three numbers separated by dots, like 1.2.43
# followed by an optional build number separated by a +.
# Both the version and the builder number may be overridden in flutter
# build by specifying --build-name and --build-number, respectively.
# In Android, build-name is used as versionName while build-number used as versionCode.
# Read more about Android versioning at https://developer.android.com/studio/publish/versioning
# In iOS, build-name is used as CFBundleShortVersionString while build-number used as CFBundleVersion.
# Read more about iOS versioning at
# https://developer.apple.com/library/archive/documentation/General/Reference/InfoPlistKeyReference/Articles/CoreFoundationKeys.html
version: 1.0.0+1

environment:
  sdk: ">=2.17.0 <3.0.0"

# Dependencies specify other packages that your package needs in order to work.
# To automatically upgrade your package dependencies to the latest versions
# consider running `flutter pub upgrade --major-versions`. Alternatively,
# dependencies can be manually updated by changing the version numbers below to
# the latest version available on pub.dev. To see which dependencies have newer
# versions available, run `flutter pub outdated`.
dependencies:
  flutter:
    sdk: flutter


  # The following adds the Cupertino Icons font to your application.
  # Use with the CupertinoIcons class for iOS style icons.
  cupertino_icons: ^1.0.2

  #Sinleton:
  # App ishlash vaqtida classlarni har safar qayta yaratmaslik uchun
  # faqat bir marta classsni objectini olinadi va shu objectni saqlab qo'yish uchun
  # get_it pluggindan foydalanamiz
  get_it: ^7.2.0

  # Design pattern:
  # BLoC(Biznes logic) design pattern
  # Appni biznes logicasi  yozish va state managementni boshqarish uchun foydalanamiz
  bloc: ^8.1.0

  # State management:
  # BLoC ni widgetlarini yaratib beradi
  #BlocProvider, BlocBuilder, BlocListener
  flutter_bloc: ^8.1.1

  # Bloc dagi amallar qanday tartibda bajarilishini ko'rsatadi
  # ketma-ket = sequential(),
  # bir vaqtda = concurrent(),
  # avvalgisini amalni bekor qilib yangi amalni bajarish = restartable(),
  # avvalgi amal bajarilmaguncha yangi amalni bekor qilish = droppable(),
  bloc_concurrency: ^0.2.0

  # Network service:
  # Network bilan ishlash uchun
  # Ma'lumotlarni serverga yuborish va serverdan ma;lumotlarni olib kelish uchun foydalaniladi
  dio: ^4.0.6

  # Fonts va Styles
  # Textlarni ko'rinishi uchun TextStyle berish uchun foydalaniladi
  google_fonts: ^3.0.1

  # Local Database
  # Kichik ma'lumotlarni Local devicega saqlab turish uchun
  # theme, password, token, phone number
  hive: ^2.2.3

  # Local databaseni device xotirasiga saqlash uchun application o'rnatilgan manzilni ko'rsatadi
  path_provider: ^2.0.11

  # Multi(ko'p) language(til) uchun foydalaniladi
  easy_localization: ^3.0.1

  # Vektor rasmlarni yuklash va ko'rsatish uchun foydalaniladi
  flutter_svg: ^1.1.6

  # Ma'lumotlarni yuklanayotganligini bildiradi
  shimmer: ^2.0.0

  # Bottom navbar uchun,
  # buni qulayligi bottom nav bardagi screenlar ichidagi biror screenga o'tganda
  # bottom nav bar saqlanib qolish kerakmi yoki yo'qmi belgilasa bo'ladi
  # va o'zini tayyor designlari ko'p
  persistent_bottom_nav_bar: ^5.0.2

  # Biz katta ma'lumotlarni Local databsega saqlash uchun moor_flutter dan foydalanamiz
  # Buni Table degan abstract clasi bor va biz o'zimizga kerak bo'ladigan
  # model class yaratsak va uni Tabledan extend qilsak, moor_generator shu biz yaratgan data classga mos
  # Table(jadval) yaratib beradi
  moor_flutter: ^4.0.0

  # Debounce -> bir amalni ma'lum vaqtdan keyin bajarilishi
  easy_debounce: ^2.0.2+1

  # Refresh screen
  pull_to_refresh_flutter3: ^2.0.1

  # Get user location
  geolocator: ^9.0.2

  # Using Google map
  google_maps_flutter: ^2.1.5

dev_dependencies:
  flutter_test:
    sdk: flutter

  # The "flutter_lints" package below contains a set of recommended lints to
  # encourage good coding practices. The lint set provided by the package is
  # activated in the `analysis_options.yaml` file located at the root of your
  # package. See that file for information about deactivating specific lint
  # rules and activating additional ones.
  flutter_lints: ^2.0.0

  # Generate Hive and Moor database
  # Hive va Moor databaselarni berilgan modelga mos
  # table va Map(key, value)larni yaratib beradi
  build_runner: ^2.1.7

  # Biz ma'lumotlarni Local Database ga saqlash uchun flutter_moor databasedan foydalandik
  # Bu databasening Table clasidan extend qilib hosil qilingan classni
  # Table larini hosil qilish uchun moor_generator foydalaniladi
  # va bu generator biz yaratgan databaseni database_name.g.dart classini yaratib beradi
  moor_generator: ^4.6.0+1

# For information on the generic Dart part of this file, see the
# following page: https://dart.dev/tools/pub/pubspec

# The following section is specific to Flutter packages.
flutter:

  # The following line ensures that the Material Icons font is
  # included with your application, so that you can use the icons in
  # the material Icons class.
  uses-material-design: true

  # To add assets to your application, add an assets section, like this:
  assets:
    - assets/
    - assets/lang/
    - assets/img/
  #   - images/a_dot_burr.jpeg
  #   - images/a_dot_ham.jpeg

  # An image asset can refer to one or more resolution-specific "variants", see
  # https://flutter.dev/assets-and-images/#resolution-aware

  # For details regarding adding assets from package dependencies, see
  # https://flutter.dev/assets-and-images/#from-packages

  # To add custom fonts to your application, add a fonts section here,
  # in this "flutter" section. Each entry in this list should have a
  # "family" key with the font family name, and a "fonts" key with a
  # list giving the asset and other descriptors for the font. For
  # example:
  # fonts:
  #   - family: Schyler
  #     fonts:
  #       - asset: fonts/Schyler-Regular.ttf
  #       - asset: fonts/Schyler-Italic.ttf
  #         style: italic
  #   - family: Trajan Pro
  #     fonts:
  #       - asset: fonts/TrajanPro.ttf
  #       - asset: fonts/TrajanPro_Bold.ttf
  #         weight: 700
  #
  # For details regarding fonts from package dependencies,
  # see https://flutter.dev/custom-fonts/#from-packages
